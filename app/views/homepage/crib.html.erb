<%= javascript_include_tag 'channels/crib.js' %>
<%= javascript_include_tag 'cable.js' %>
<% player = Cribplayer.where(:key => cookies[:crib_id]).first %>
  <% number_of_players = Cribplayer.where(:game_id => player.game_id).count %>

<%= form_tag crib_player_path, :id => 'crib_player' do %>
  <table>
    <tr>
      <td>
        Game number
      </td>
      <td>
        <%= text_field_tag :game_id , player.blank? ? "" : player.game_id, :class => "small_input", :style => "margin-left: 20px" %>
      </td>
      <td>
        Your name
      </td>
      <td>
        <%= text_field_tag :name, player.blank? ? "" : player.name, :class => "small_input", :style => "margin-left: 20px" %>
      </td>
      <td>
        <%= submit_tag "Apply" , :class=>"small_button" %>
      </td>
      <td>
        <%= submit_tag "Deal" , :class=>"small_button", :style=>"margin-left: 60px"%>
      </td>
      <td>
        <div id="dealrequest">
          <%= render_deal_request(player.game_id)%>
        </div>
      </td>
    </tr>
</table>
<% end %>

<% if player.present? %>
  <script type="text/javascript">
    window.onload = update_scoreboard_on_load;

    (function ()  {
      start_up();
      }).call(this);
      <% if number_of_players > 0 %>

      function update_scoreboard_on_load() {
        var scores = <%= scores_array(player) %>;
        update_scoreboard(scores, <%= names_array(player) %>, <%= player.number.to_s %>);
      <% end %>
      }

      var w, h;
      var left_margin = 0.2, right_margin = 0.05;
      var number_of_sets = 6, holes_per_set = 5;
      var gap_between_sets = 0.03;
      var distance_between_holes, distance_between_sets;


      function update_scoreboard(scores, names, player_number) {
            // alert(scores + "; " + names + "; " + player_number);
            var c = document.getElementById("myCanvas");
            var ctx = c.getContext("2d");
            ctx.lineWidth = "0";
            ctx.fillStyle = "#ff8c1a";
            ctx.fillRect(0, 0, c.width, c.height);

            w = c.width;
            h = c.height;

            distance_between_holes = w * (1-left_margin - right_margin - ( number_of_sets - 1 ) * gap_between_sets ) / ( number_of_sets * holes_per_set );
            distance_between_sets = holes_per_set * distance_between_holes + gap_between_sets * w;
            for (player = 1; player <= scores.length; player++) {
              y = 20 + (player - 1) * 34;
              ctx.fillStyle = "#994d00";
              ctx.font = "16px Arial";
              ctx.textAlign = "left";
              ctx.fillText(names[ player - 1 ], 10, y );
              if (player == player_number){
                ctx.beginPath();
                ctx.arc(5, y-6, 3, 0, 2 * Math.PI);
                ctx.fill();

              }

              ctx.textAlign = "left";

              ctx.font = "12px Arial";

              ctx.fillText("+1", 80, y -2);
              ctx.beginPath();
              ctx.rect(78, y - 14 , 17, 15);
              ctx.stroke();
              ctx.fillText("+2", 100, y -2);
              ctx.beginPath();
              ctx.rect(98, y - 14, 17, 15);
              ctx.stroke();
              ctx.fillText("+5", 120, y -2);
              ctx.beginPath();
              ctx.rect(118, y - 14, 17, 15);
              ctx.stroke();

              ctx.fillText("-1", 150, y -2);
              ctx.beginPath();
              ctx.rect(148, y - 14, 17, 15);
              ctx.stroke();
              ctx.fillText("-5", 170, y -2);
              ctx.beginPath();
              ctx.rect(168, y - 14, 17, 15);
              ctx.stroke();


              ctx.textAlign = "right";
              score = scores[player - 1];
              ctx.font = "20px Arial";
              ctx.fillText(score, w * ( 1 - right_margin / 5 ), y);

              for (n1 = 0; n1 < number_of_sets; n1++) {
                for (n2 = 0; n2 < holes_per_set; n2++) {
                  ctx.beginPath();
                  ctx.arc(left_margin * w + n1 * distance_between_sets + n2 * distance_between_holes, y -10, 2, 0, 2 * Math.PI);
                  ctx.stroke();
                  ctx.beginPath();
                  ctx.arc(left_margin * w + n1 * distance_between_sets + n2 * distance_between_holes, y, 2, 0, 2 * Math.PI);
                  ctx.stroke();

                }

              }
              ctx.fillStyle = "blue";
              if (score > 0){
                plot_score(ctx, score, y-10);
              }

            }

            // alert(scores + "; " + names + "; " + player_number);



          }


          function plot_score(ctx, playerscore, voffset){
            playerscore -=1;
            playerscore %= 60;
            if ( playerscore >= 30 ) {
              playerscore = 59 - playerscore;
              voffset += 10;
            }

            ctx.beginPath();
            ctx.arc(left_margin * w + Math.floor( playerscore / holes_per_set ) * distance_between_sets + ( playerscore % holes_per_set ) * distance_between_holes, voffset, 5, 0, 2 * Math.PI);
            ctx.fill();

          }


          function canvasmousedown() {

            var ctx = document.getElementById('myCanvas');
            var button_lefts = [[78, 1],[98,2],[118,5],[148,-1],[168,-5]];
            var rect = ctx.getBoundingClientRect();
            // var x = event.clientX - ctx.offsetLeft, y = event.clientY - ctx.offsetTop;
            var x = event.clientX - rect.left, y = event.clientY - rect.top;

            for (player = 0; player < <%= number_of_players.to_s %>; player++) {
                player_y = 6 + player * 34;
                button_lefts.forEach (function(button_left) {
                  if (inbounds(x, y, button_left[0], player_y, 17, 15)){
                    crib_move_card("<%= cookies[:crib_id] %>" + "/" + button_left[1], "p" + (player + 1));
                  }
              })

              if (( (y > player_y) && (y < player_y + 9) ) || ((y > player_y + 9) && (y < player_y + 19)))  {
                loop1:
                for (n1 = 0; n1 < number_of_sets; n1++) {
                  for (n2 = 0; n2 < holes_per_set; n2++) {
                    var x1 = left_margin * w + n1 * distance_between_sets + n2 * distance_between_holes;
                    if (( x > x1 - 7 ) && ( x < x1 + 7 )){
                      score = n1 * holes_per_set + n2;

                      if ((y > player_y) && (y < player_y + 9)) {
                        score +=1;
                        crib_move_card("<%= cookies[:crib_id] %>" + "/" + score, "s" + (player + 1));
                        // alert(player + "; " + score);
                        break loop1;
                      }

                      if  ((y > player_y + 9) && (y < player_y + 19)) {
                        score = 60 - score;
                        crib_move_card("<%= cookies[:crib_id] %>" + "/" + score, "s" + (player + 1));
                        // alert(player + "; " + score);
                        break loop1;
                      }


                    }

                  }

                }

            }


            }


          }

          function inbounds(x,y,x1,y1,w,h){
            return ( x >= x1) && ( x <= x1 + w ) && ( y >= y1 ) && ( y <= y1 + h)
          }

  </script>
<% end %>

<style>
  .mainRunner {
    position: relative;
  }
  .card {
    position: relative;
    z-index: 1;
  }

  /* The container <div> - needed to position the dropdown content */
  .dropdown {
    position: relative;
    display: inline-block;
    cursor: grab1;
  }

  /* Dropdown Content (Hidden by Default) */
  .dropdown-content {
    display: none;
    position: absolute;
    left: -10px;
    top: 30px;
    z-index: 100;
    background-color: #f1f1f1;
    min-width: 160px;
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
  }

  /* Links inside the dropdown */
  .dropdown-content a {
    position: relative;
    left: 0px;
    top: 0px;
    color: black;
    padding: 6px 6px;
    text-decoration: none;
    display: block;
  }

  /* Change color of dropdown links on hover */
  .dropdown-content a:hover {
    display:block;
    background-color: #ddd
  }

  /* Show the dropdown menu (use JS to add this class to the .dropdown-content container when the user clicks on the dropdown button) */
  .show {display:block;}

  .hand{
    border-style: solid;
    border-width: 6px;
    border-radius: 20px;
    border-color: gold;
    background: white;
    padding: 6px;
  }

  .player{
    border-style: solid;
    border-width: 6px;
    border-radius: 20px;
    border-color: blue;
    background: #e0e0e0;
    padding: 4px;
  }

  .small_input{
    display: table-cell;
    vertical-align: middle;
    width: 110px;
    height: 28px;
    max-height: 28px;
    font-family: Arial;
    text-align: center;
    line-height: 20px;
    border-radius: 5px;
    font-weight: bold;
    font-size: 9pt;
    border: 2px solid blue;
    color: black;
    background: white;
    margin: 5px;
  }

  .small_button{
    display: table-cell;
    vertical-align: middle;
    width: 110px;
    height: 28px;
    max-height: 28px;
    font-family: Arial;
    text-align: center;
    line-height: 20px;
    border-radius: 5px;
    font-weight: bold;
    font-size: 9pt;
    border: 1px solid blue;
    color: black;
    background: #c0c0c0;
    margin: 5px;
  }

  .flex_row {
      height: 60px;
      display: inline-flex;
      flex-direction: row;
      align-items: center;
      padding: 0px;
      }

  .center {
        display: block;
        margin-left: auto;
        margin-right: auto;
      }
</style>

<script>

  var currently_selected_card = 0;

  function mouse_down(n) {

    document.getElementById("myDropdown" + n).classList.toggle("show");
    var all = document.getElementsByClassName("dropdown-content");

    for(i = 0; i < all.length; i++) {
      if (all[i].id != ("myDropdown" + n)) {
        if (all[i].classList.contains('show')) {
          all[i].classList.remove('show');
        }
      } else {
      }
    }
  }



  // Close the dropdown menu if the user clicks outside of it
  window.onclick = function(event) {
    if (!event.target.classList.contains('card')) {
      var dropdowns = document.getElementsByClassName("dropdown-content");
      var i;
      for (i = 0; i < dropdowns.length; i++) {
        var openDropdown = dropdowns[i];
        if (openDropdown.classList.contains('show')) {
          openDropdown.classList.remove('show');
        }
      }
    }
  }


  function crib_move_card(card,instruction) {

    var xhr = new XMLHttpRequest();
    xhr.open("POST", "crib_move_card", true);
    xhr.send(instruction + "_" + card);
    // return false;
  }

</script>
<div id="hands_and_score">
  <%= render_hands_and_score(player) %>
</div>
